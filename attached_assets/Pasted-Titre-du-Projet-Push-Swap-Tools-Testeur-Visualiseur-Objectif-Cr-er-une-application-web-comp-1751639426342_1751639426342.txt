Titre du Projet : Push Swap Tools - Testeur & Visualiseur

Objectif :
Créer une application web complète et unifiée dans un seul fichier index.php. Cette application doit permettre de tester et de visualiser le fonctionnement d'un programme push_swap. L'interface doit être moderne, réactive, et utiliser un thème sombre.
Technologies Requises :

    Backend : PHP. Toute la logique serveur doit être contenue dans le même fichier index.php. Le serveur doit pouvoir exécuter des commandes shell (nécessite un environnement comme un serveur local XAMPP/MAMP ou un VPS, car les hébergeurs gratuits bloquent souvent cette fonctionnalité).

    Frontend : HTML, Tailwind CSS, et JavaScript (pour les requêtes AJAX, les animations et la manipulation du DOM).

Structure Générale :

    Fichier Unique : L'application entière doit être contenue dans un seul fichier index.php.

    Navigation par Onglets : Une barre de navigation en haut de la page doit permettre de basculer entre deux modes : "Tester" et "Visualizer", sans recharger la page. L'onglet "Tester" est actif par défaut.

    Backend Intégré : La partie PHP en haut du fichier index.php doit gérer les requêtes AJAX envoyées par le JavaScript. Elle ne doit s'exécuter que lors d'une requête POST.

Fonctionnalité 1 : Le Mode "Tester"

Ce mode permet de tester rigoureusement un exécutable push_swap avec un checker.

Interface Utilisateur (UI) :

    Import de Fichiers :

        Un bouton stylisé pour importer l'exécutable push_swap.

        Un bouton stylisé pour importer l'exécutable checker (par exemple, checker_linux ou checker_mac).

        Le nom du fichier sélectionné doit s'afficher à côté de chaque bouton.

    Panneau de Paramètres :

        Champ numérique pour la "Taille de la liste" (ex: 100).

        Champ numérique pour les "Opérations max" (ex: 700).

        Champ numérique pour le "Nombre de tests" à lancer (ex: 100).

    Options :

        Une case à cocher "Afficher les arguments si KO".

    Bouton d'Action :

        Un bouton "Lancer les tests" qui est désactivé tant que les deux fichiers (push_swap et checker) n'ont pas été importés.

Logique Backend (PHP) :

    Lorsqu'une requête est reçue, le backend doit :

        Créer un dossier temporaire unique sur le serveur.

        Y sauvegarder les fichiers push_swap et checker uploadés.

        Rendre ces deux fichiers exécutables (chmod +x).

        Lancer une boucle pour le nombre de tests demandé. À chaque itération :
        a.  Générer une liste de nombres aléatoires uniques avec la taille spécifiée (utiliser la commande shuf est idéal).
        b.  Test 1 (Validation) : Exécuter la commande ./push_swap $ARG | ./checker $ARG. Si le résultat n'est pas "OK", le test échoue.
        c.  Test 2 (Performance) : Exécuter la commande ./push_swap $ARG | wc -l. Si le nombre d'opérations est supérieur au maximum autorisé, le test échoue.

        Renvoyer le résultat de chaque test (succès ou échec avec les détails) au format JSON.

        Supprimer le dossier temporaire et son contenu.

Logique Frontend (JavaScript) :

    Le JavaScript doit envoyer les données du formulaire et les fichiers au backend via une requête fetch (AJAX).

    Afficher des barres de progression en temps réel pour le Test 1 et le Test 2.

    Afficher clairement le résultat final de chaque test : "✔ OK" ou "✘ KO".

    En cas de "KO", afficher les détails : le résultat du checker ou le nombre d'opérations vs. la limite, ainsi que la liste des arguments si la case est cochée.

Fonctionnalité 2 : Le Mode "Visualizer"

Ce mode permet de visualiser l'exécution de push_swap sur une liste aléatoire.

Interface Utilisateur (UI) :

    Import de Fichier :

        Un seul bouton stylisé pour importer l'exécutable push_swap.

    Panneau de Paramètres :

        Un curseur (slider) pour choisir la "Taille de la liste" (ex: de 3 à 500).

        Un curseur pour régler la "Vitesse d'animation" (le texte doit afficher la vitesse en ms et se mettre à jour).

    Bouton d'Action :

        Un bouton "Générer & Visualiser" qui est désactivé tant que le fichier push_swap n'a pas été importé.

    Zone de Visualisation :

        Deux colonnes représentant la "Pile A" et la "Pile B".

        Un affichage pour l'opération en cours (ex: ra).

        Un compteur d'opérations (ex: 15 / 120).

        Un bouton "Pause" / "Reprendre" qui contrôle l'animation. Ce bouton doit être logiquement désactivé (grisé) lorsque l'animation est terminée.

Logique Backend (PHP) :

    Lorsqu'une requête est reçue pour le visualiseur, le backend doit :

        Sauvegarder et rendre exécutable le fichier push_swap uploadé.

        Générer une liste de nombres aléatoires de la taille demandée.

        Exécuter ./push_swap avec ces nombres pour obtenir la liste complète des opérations.

        Renvoyer au format JSON la liste des nombres de départ ET la liste des opérations.

Logique Frontend (JavaScript) :

    Le JavaScript reçoit les nombres de départ et la liste des opérations.

    Il initialise deux tableaux (pile A et pile B).

    Il lance une boucle (setInterval) qui exécute une opération à la fois à la vitesse définie par le curseur.

    À chaque étape, l'interface doit se mettre à jour avec une animation fluide : les blocs représentant les nombres doivent glisser visiblement d'une pile à l'autre ou changer de position.

    À la fin, il vérifie si la pile est correctement triée et affiche un message de succès (✔️) ou d'échec (❌).